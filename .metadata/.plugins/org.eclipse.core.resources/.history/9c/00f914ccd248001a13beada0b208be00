import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ImageCount {
	
	public static class ImageCounterMapper extends MapReduceBase implements Mapper<LongWritable,Text,Text,IntWritable>
	{
		
		private Text somekey = new Text();
		  
		  public void map(LongWritable key, Text value, OutputCollector<Text,IntWritable> output,Reporter reporter)
		      throws IOException {
			  
			  String line = value.toString();
			  StringTokenizer tokenizer = new StringTokenizer(line);
			  while(tokenizer.hasMoreTokens())
			  {
				  somekey.set(tokenizer.nextToken());
				  output.collect(somekey,new IntWritable(1));
			  }
		  }
		
	}
	
	public static class ImageCounterReduce extends MapReduceBase implements Reducer<Text,IntWritable,Text,IntWritable>
	{
		
		public void reduce(Text key, Iterator<IntWritable> values,OutputCollector<Text,IntWritable> output,Reporter reporter)
			      throws IOException {
				  
				  int sum =0;
				  while(values.hasNext())
				  {
					  sum += values.next().get();
				  }
				  output.collect(key, new IntWritable(sum));

			  }	
	}
	

  public static void main(String[] args) throws Exception {
    if (args.length != 2) {
      System.err.println("Usage: ImageCount <input path> <output path>");
      System.exit(-1);
    }
    
    JobConf conf = new JobConf(ImageCount.class);
    conf.setJobName("ImageCount");

    conf.setMapperClass(ImageCountMapper.class);
    conf.setReducerClass(ImageCountReducer.class);
    
    conf.setOutputKeyClass(Text.class);
    conf.setOutputValueClass(IntWritable.class);
    
    FileInputFormat.setInputPaths(conf, new Path(args[0]));
    FileOutputFormat.setOutputPath(conf, new Path(args[1]));

    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}